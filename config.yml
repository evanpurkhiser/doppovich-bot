# The database file pathto store state in
dbPath: ./database.sqlite

# The JSON files that the bot will read old messages from
messageFiles:
  facebook: ./facebook_*.json

# The telegram chat ID the bot should be active in
chatId: '-1001375311913'

# The minimum length a message must be to be considered a candidate to be
# quoted
minMessageLength: 30

# The messages the bot will oepn with
greetings:
  - Yo
  - Yo guys
  - Hey guys
  - Hey everyone
  - Omg
  - Guys
  - Wait what.
  - LOL
  - Holy shit
  - Aw shit
  - Bruh
  - Damn
  - Waddup everyone
  - Wtf

# Used for aliasing users
userAlias:
  Joseph: [Joe]

# The message following the greeting, just before posting the quote
intros:
  - Remember when [user] said
  - Remember that time when [user] said
  - I randomly stumbled on this thing that [user] said
  - Still can’t believe that [user] said
  - I still haven’t gotten over that time that [user] said
  - Not to keep dwelling on it, but I never forgot that [user] said
  - It really was crazy AF when [user] said
  - I gotta say, I never moved past it when [user] said
  - It has me in stitches when [user] said
  - "I'm here scratching my head that [user] said"
  - Gotta be honest, it creeped me the fuck out when [user] said
  - It really made an impression on me that [user] said
  - We need to talk about how [user] said
  - "[user] wasn't fucking around when he said"
  - I will never live it down that [user] said
  - Do you guys remember when [user] said
  - What the fuck was [user] thinking when he said
  - It still keeps me up at night that [user] said

followups:
  # whenWas is a follow up where Taryn will tell us about WHEN the message was
  whenWas:
    # How long until Taryn no longer will respond to message matches. Currently
    # set for 30 minutes in seconds
    timeLimit: 1800

    # What text should taryn listen for? can be a regular expression
    matches:
      - 'when was'

    # The responses will be randomly picked, and a sequence can be used. There
    # are a few types of keys which can be used
    #
    # - `[date:(format)]` i.e. [date:MMMM YYYY] will produce `October 2021`.
    # - `[timeAgo]` The '2 years' ago format
    # - `[timeAgoWrong]` Taryn will be off by some magnitude
    #
    responses:
      - - 'He said it back in [date:MMMM YYYY]'
      - - 'I think it was back in [date:MMMM YYYY]?'
        - 'Anyone else know?'
      - - 'It was like [timeAgo] ago or something. I dunno.'
        - 'Okay yeah, it was [date:MMMM DD YYYY]'
      - - 'He said it on [date:MM/DD/YYYY], which is really nuts when you think about it'
      - - 'I think it was around [timeAgoWrong] ago?'
        - 'Wait, actually it was on [date:MM/DD/YYYY] LOL'

  # Context follow up asks taryn to provide some context for the messages
  context:
    # How long until Taryn no longer will respond to message matches. Currently
    # set for 30 minutes in seconds
    timeLimit: 1800

    # What text should taryn listen for? can be a regular expression
    matches:
      - 'context'

    intros:
      - Fuck, let me go back, I just closed it
      - Gimme a sec
      - Sure, sec
      - Lemme check
      - Dude, google it yourself. LOL JK
      - You serious? But ok

    outros:
      - "Ok, now that I'm reading the rest of it, it wasn't actually that funny"
      - "Somehow I'm actually MORE confused by this"
      - Tbh, the context kinda ruins it
      - Not sure what I expected, tbh
      - Pretty hilarious, ngl
